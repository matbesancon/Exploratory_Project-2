abline(ext1)
abline(ext1$coefficients)
abline(ext1$coefficients[2])
abline(ext$coefficients[2])
abline(coef(ext))
source('~/.active-rstudio-document', echo=TRUE)
abline(coef(ext1))
ext1[1]
ext1[2]
ext1<- ext[1,:]
ext1<- ext[1,]
ext
ext1<- ext[,1]
ext2<- ext[,2]
abline(coef(ext1))
set1 <- c(ext[1,1],ext[1,1]+ext[2,1])
set2 <- c(ext[1,2],ext[1,2]+ext[2,2])
abline(set1)
abline(set2)
set1 <- c(ext[1,1],ext[1,1]+ext[2,2])
set2 <- c(ext[1,2],ext[1,2]+ext[2,1])
abline(set1)
abline(set2)
abline(ext1)
source('~/.active-rstudio-document', echo=TRUE)
abline(ext[,1])
source('~/.active-rstudio-document', echo=TRUE)
print('Slope')
print(Slope)
source('~/.active-rstudio-document', echo=TRUE)
hel(min)
help(min)
mini<- min(manu$mpg)
maxi<- max(auto$mpg)
data(mtcars)
reg1 <- lm(mtcars$mpg~mtcars$am)
plot(mtcars$mpg~mtcars$am)
abline(reg1)
summary(reg1)
slope = as.numeric(reg1$coefficients[2])
auto <- subset(mtcars, am==0)
manu <- subset(mtcars, am==1)
std_auto=sd(auto$mpg)
std_manu=sd(manu$mpg)
ext <- confint(reg1,level=0.99)
abline(ext[,1])
abline(ext[,2])
mini<- min(manu$mpg)
maxi<- max(auto$mpg)
boxplot(auto$mpg)
boxplot(manu$mpg)
boxplot(auto$mpg,manu$mpg)
mean_auto=mean(auto$mpg)
summary(reg1)
ext
normal??
p
??normal
1-pnorm((maxi-avg_auto)/std_auto, 1, 0, lower.tail = TRUE, log.p = FALSE)
#Test 2
pnorm((mini-avg_manu)/std_manu, 1, 0, lower.tail = TRUE, log.p = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
ext
help(knitr)
??knitr
??axis
ylab("MPG")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
residual <- resid(reg1)
summary(residuals)
summary(residual)
plot(mtcars$am,residual)
swirl()
load('swirl')
open('swirl')
library('swirl')
swirl()
ones <- rep(1,rnow(galton))
ones <- rep(1,nrow(galton))
lm(child~ones+parents -1)
lm(child~ones+parents -1,galton)
lm(child ~ ones + parent -1,galton)
lm(child ~ parent, galton)
lm(child~1,galton)
view(trees)
View(trees)
fit <- lm(Volume~Girth + Height + Constant -1)
fit <- lm(Volume~Girth + Height + Constant -1,trees)
trees2 <- eliminate("Girth",trees)
head(trees2)
fit2 <- lm(Volume~Height+Constant-1,trees2)
lapply(list(fit,fit2,coef))
lapply(list(fit,fit2),coef))
lapply(list(fit,fit2),coef)
clear
clear()
library("swiss")
source('~/.active-rstudio-document', echo=TRUE)
require(stats)
pairs(swiss,panel=panel.smooth,main="Swiss data")
pairs(swiss,panel=panel.smooth,main="Swiss data",col=3+(swiss$Catholic>50))
?swiss
summary(lm(Fertility~ . ,data=swiss))
source('~/.active-rstudio-document', echo=TRUE)
reg1<-lm(Fertility~Agriculture, swiss)
plot(swiss$Agriculture, swiss$Fertility)
abline(reg1,col='red')
y <- swiss$Fertility - swiss$Education
x <- resid(lm(Agriculture ~ Education,swiss))
reg2<-lm(y~x)
reg2<-lm(y~x)
plot(x,y)
abline(reg2,col='red')
k=c(2:4,2:4)
k
k=c(2:4;2:4)
k=(2:4;2:4)
k=(2:4,2:4)
k=c(2:4,2:4)
cor(swiss, use="complete.obs", method="pearson")
Mat1<- cor(swiss, use="complete.obs", method="pearson")
Mat1<-Mat1^2
Mat1
source('~/.active-rstudio-document', echo=TRUE)
library("mtcars")
source('~/.active-rstudio-document', echo=TRUE)
datasets("mtcars")
??dataset
datasets(mtcars)
??load
load(mtcars)
load('mtcars')
??data
??mtcars
mod <- lm(mpg~cyl+wt-1)
mod <- lm(mpg~cyl+wt-1,mtcars)
mod$coefficients
cof<-mod$coefficients
mod <- lm(mpg~cyl+wt,mtcars)
cof<-mod$coefficients
cof
-1.507795*2
-1.507795*4
plot(mod)
mod2<-lm(mpg~cyl,mtcars)
mod$coefficients
mod2$coefficients
data(mtcars)
mod <- lm(mpg~cyl+wt+cyl*wt,mtcars)
cof<-mod$coefficients
cof
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
reg1<-lm(y~x)
hat(reg1)
hat(x,intercept=TRUE)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
reg1<-lm(y~x)
hat(reg1)
max(hat(x,intercept=TRUE))
k<-max(hat(x,intercept=TRUE))
dfbetas(reg1)
rm(list = ls())
P<-c(0,-1,+1,-1,+1)
T<-c(0,-1,-1,+1,+1)
y<-c(407,193,468,310,571)
exp<-lm(y~T+P+P*T)
summary(exp)
exp<-lm(y~P*T)
summary(exp)
contourPlot <- function(lsmodel, P, T, title="Contour plot"){
# Run this line if you don't have the "ggplot2" package installed
# install.packages("ggPlot2", dependencies = TRUE)
library(ggplot2)
N <- 25        # surface resolution
bound <- 2.4
P_plot <- seq(-bound, bound, length=N)
T_plot <- seq(-bound, bound, length=N)
grd <- expand.grid(P_plot, T_plot)
colnames(grd) <- colnames(model.frame(lsmodel)[2:3])
# Predict directly from least squares model
grd$y <- predict(lsmodel, grd)
binwidth = (max(grd$y) - min(grd$y))/20
names <- colnames(grd)
p <- ggplot(grd, aes_string(names[1], names[2], z="y")) +
stat_contour(aes(color=..level..), binwidth=binwidth) +
scale_colour_gradientn(colours=terrain.colors(10)) +
theme(panel.background=element_rect(fill="white")) +
theme(panel.grid=element_blank()) +
theme_bw() +
theme(plot.title = element_text(size = rel(2))) +
theme(axis.title = element_text(face="bold", size = rel(1.5))) +
labs(title=title) +
# add the experimental data points
geom_point(data=data.frame(P=P, T=T), aes(x=P, y=T), size=5) +
scale_x_continuous(breaks = seq(-round(bound), round(bound), by = 1)) +
scale_y_continuous(breaks = seq(-round(bound), round(bound), by = 1))
p          # Execute the plot (i.e. draw it!)
return(p)  # Return the plot, so user can continue to modify it
}
contourPlot(exp,P,T)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
A<-c(-1,1,-1,1,0)
B<-c(-1,-1,1,1,0)
#C<-A*B
y<-c(80, 86,	82,	89,	84)
reg1<-lm(y~(A+B)^2)
summary(reg1)
source('~/.active-rstudio-document', echo=TRUE)
A<-c(-1,1,-1,1,0,3)
B<-c(-1,-1,1,1,0,1)
#C<-A*B
y<-c(80, 86,	82,	89,	84,93)
reg1<-lm(y~(A+B)^2)
summary(reg1)
contourPlot <- function(lsmodel, P, T, title="Contour plot"){
contourPlot <- function(lsmodel, P, T, title="Contour plot"){
# Run this line if you don't have the "ggplot2" package installed
# install.packages("ggPlot2", dependencies = TRUE)
library(ggplot2)
N <- 25        # surface resolution
bound <- 2.4
P_plot <- seq(-bound, bound, length=N)
T_plot <- seq(-bound, bound, length=N)
grd <- expand.grid(P_plot, T_plot)
colnames(grd) <- colnames(model.frame(lsmodel)[2:3])
# Predict directly from least squares model
grd$y <- predict(lsmodel, grd)
binwidth = (max(grd$y) - min(grd$y))/20
names <- colnames(grd)
p <- ggplot(grd, aes_string(names[1], names[2], z="y")) +
stat_contour(aes(color=..level..), binwidth=binwidth) +
scale_colour_gradientn(colours=terrain.colors(10)) +
theme(panel.background=element_rect(fill="white")) +
theme(panel.grid=element_blank()) +
theme_bw() +
theme(plot.title = element_text(size = rel(2))) +
theme(axis.title = element_text(face="bold", size = rel(1.5))) +
labs(title=title) +
# add the experimental data points
geom_point(data=data.frame(P=P, T=T), aes(x=P, y=T), size=5) +
scale_x_continuous(breaks = seq(-round(bound), round(bound), by = 1)) +
scale_y_continuous(breaks = seq(-round(bound), round(bound), by = 1))
p          # Execute the plot (i.e. draw it!)
return(p)  # Return the plot, so user can continue to modify it
}
contourPlot(reg1,A,B)
contourPlot(reg1,A,B)
contourPlot(reg1,A,B)
source('~/.active-rstudio-document', echo=TRUE)
esc
frjnfr
]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(reg1)
summary(reg1)
y6<-reg1(3,1)
y6<-reg1$coefficients[1]+3*reg1$coefficients[2]+1*reg1$coefficients[3]+3*1*reg1$coefficients[4]
y6
84.2+3.25*3+1.25+0.25*3
source('~/.active-rstudio-document', echo=TRUE)
P<-c(-1,1,-1,1)
T<-c(-1,-1,1,1)
y<-c(12,  5,	13,	6)
reg.1<-lm(y~P+T+P*T)
summary(reg.1)
P<-c(-1,1,-1,1)
T<-c(-1,-1,1,1)
y<-c(12,  5,	13,	6)
reg.1<-lm(y~P+T)
summary(reg.1)
contourPlot(reg.1,P,T)
D<-c(0,  -1,	1,	-1,	1,	0,	0,	+1.41,	0,	-1.41,	0)
T<-c(0, -1,	-1,	1,	1,	0,	-1.41,	0,	1.41,	0,	0)
y<-c(60,  49,	30,	62,	50,	56,	26,	40,	63,	57,	62)
D<-c(0,  -1,	1,	-1,	1,	0,	0,	+1.41,	0,	-1.41,	0)
T<-c(0, -1,	-1,	1,	1,	0,	-1.41,	0,	1.41,	0,	0)
y<-c(60,  49,	30,	62,	50,	56,	26,	40,	63,	57,	62)
mod<-lm(y~(D+T)^2)
summary(mod)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Born To Code/Optimization Contour Plot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/elimination.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cubePlot(reg1, "Pressure", "Temperature", "Concentration")
iM.lm <- lm(y ~ (.)^2, data = y)
swirl
swirl()
load("swirl")
library("swirl")
swirl()
cor(gpa_nor,gch_nor)
l_nor<- lm(gch_nor~gpa_nor)
lm(child~parents,galton)
lm(child~parent,galton)
fit<-lm(child~parent,galton)
sum(fit$residuals)/(n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-galton$children
mu<-mean(galton$children)
mu<-mean(galton$child)
sTot<-sum((galton$child-mu)^2)
sRes<-deviance(fit$chil)
sRes<-deviance(fit$child)
sRes<-deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
(corr(galton$child,galton$parent)^2)
(cor(galton$child,galton$parent)^2)
cor(galton$child,galton$parent)^2
ones<-rep(1,nrow(galton))
lm(child~parent+ones-1)
lm(child~parent+ones-1,galton)
lm(child~parent,galton)
lm(child ~ 1, galton)
head(trees)
fit<-lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2<-lm(Volume~Height+Constant-1,trees2)
lapply(list(fit, fit2), coef)
all<-lm(fertility~.,swiss)
all<-lm(Fertility~.,swiss)
summary(all)
lm(Fertility~agriculture)
lm(Fertility~agriculture,swiss)
lm(Fertility~Agriculture,swiss)
summary(lm(Fertility~Agriculture,swiss))
cor(Examination,Education,swiss)
cor(Examination,Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec=swiss$Examination+swiss$Catholic
ec<-swiss$Examination+swiss$Catholic
efit<-lm(Fertility~.+ec,swiss)
efit$coefficients-all$fit
efit$coefficients-all$coefficients
efit$coefficients-all$coefficients
-efit$coefficients+all$coefficients
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays$class)
m
n
sapply(InsectSprays,class)
fit<-lm(count~spray,InsectSprays)
summary(fit)
summary(fit)$coef
est<-summary(fit)$coef[1,]
est<-summary(fit)$coef[,1]
mean(InsectSprays$sA)
mean(sA)
mean(sprayB)
mean(sB)
nfit<-lm(count ~ spray - 1,InsectSprays)
nfit$coef
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray-1,InsectSprays)
fit2<-lm(count~spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
((fit$coef[3]) - (fit$coef[2]))/1.6011
((fit$coef[2]) - (fit$coef[3]))/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
install("KernSmooth")
load("KernSmooth")
library("KernSmooth")
*ho
library(AppliedPredictiveModeling)
data(concrete)
library(AppliedPredictiveModeling)
install.package("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
install.packages("caret")
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(concrete$CompressiveStrength)
names(concrete)
plot(concrete$CompressiveStrength,col=FlyAsh)
plot(concrete$CompressiveStrength,col='FlyAsh')
plot(concrete$CompressiveStrength,col=concrete$FlyAsh)
concrete$FlyAsh
rbPal <- colorRampPalette(c('red','blue'))
coloring<-rbPal(20)[as.numeric(cut(concrete$FlyAsh,break=20))]
coloring<-rbPal(20)[as.numeric(cut(concrete$FlyAsh,break=20))]
coloring<-rbPal(20)[as.numeric(cut(concrete$FlyAsh,breaks=20))]
plot(concrete$CompressiveStrength,col=coloring)
histogram(conctrete$SuperPlasticizer)
histogram(concrete$SuperPlasticizer)
names(concrete)
histogram(concrete$Superplasticizer)
histogram(concrete$Superplasticizer,freq=TRUE)
histogram(concrete$Superplasticizer,freq=FALSE)
histogram(concrete$Superplasticizer,freq=FALSE,break=20)
histogram(concrete$Superplasticizer,freq=FALSE,breaks=20)
histogram(concrete$Superplasticizer,freq=FALSE,breaks=50)
min(concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(AlzheimerDisease)
adData
names(adData)
preProcess(adData$IL_13,adData$IL_17E,adData$IL_3,adData$IL_5,adData$IL_16,adData$IL_6_Receptor,adData$IL_8,adData$IL_1alpha,adData$IL_11,adData$IL_6,adData$IL_4,adData$IL_7)
preProcess(adData$IL_13,adData$IL_17E,adData$IL_3,adData$IL_5,adData$IL_16,adData$IL_6_Receptor,adData$IL_8,adData$IL_1alpha,adData$IL_11,adData$IL_6,adData$IL_4,adData$IL_7,thresh=0.9,method='pca')
fit<-lm(adData$diagnosis~adData$IL_13+adData$IL_17E+adData$IL_3+adData$IL_5+adData$IL_16+adData$IL_6_Receptor+adData$IL_8+adData$IL_1alpha+adData$IL_11+adData$IL_6+adData$IL_4+adData$IL_7)
1
summary(fit)
adData$IL_6_Receptor
fit$coef
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
install.packages("caret")
library(caret)
set.seed(975)
rbPal <- colorRampPalette(c('red','blue'))
coloring<-rbPal(20)[as.numeric(cut(concrete$Age,breaks=20))]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(concrete$CompressiveStrength,col=coloring)
coloring<-rbPal(20)[as.numeric(cut(concrete$FlyAsh,breaks=20))]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(concrete$CompressiveStrength,col=coloring)
actidata=read.csv("activity.csv")
#takes all the rows, we want to regroup for each day
#h1<-barplot(steps,names.arg=date,ylab="Number of steps",xlab="Date")
aggdata<-aggregate(actidata$steps,list(actidata$date),FUN=sum)
barplot(aggdata[,2],names.arg=aggdata[,1])
mean_steps=mean(na.omit(aggdata[,2]))
med_steps=median(na.omit(aggdata[,2]))
#lines(actidata$interval,actidata$steps,type='l')
agg2<-aggregate(actidata$steps,list(actidata$interval),FUN=mean,na.rm=TRUE)
plot(agg2[,1],agg2[,2],type='l',xlab="Interval",ylab="Steps")
num_na<-sum(is.na(actidata$steps))
frac_na<-num_na/(num_na+length(actidata$steps))
agg3<-aggregate(actidata$steps,list(actidata$date),FUN=median,na.rm=TRUE)
actidata=read.csv("activity.csv")
actidata=read.csv("activity.csv")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Born To Code/Exploratory Data Analysis/Exploratory_Project-2")
source('~/Born To Code/Exploratory Data Analysis/Exploratory_Project-2/plot1.R', echo=TRUE)
plot(agg_part$Group.1,agg_part$x,type="+")
plot(agg_part$Group.1,agg_part$x,type="x")
plot(agg_part$Group.1,agg_part$x,type="l")
log_part<-log(agg_part$x)
log_part
log_part<-log10(agg_part$x)
log_part
plot(agg_part$Group.1,log_part,type="l")
plot(agg_part$Group.1,agg_part$x,type="l")
plot(agg_part$Group.1,agg_part$x,main=)
plot(agg_part$Group.1,agg_part$x,main="Particle concentration in the US")
plot(agg_part$Group.1,agg_part$x,main="Particle emissions in the US",xlab="Year",ylab="Particle emission (T)")
plot(agg_part$Group.1,agg_part$x,main="Particle emissions in the US",xlab="Year",ylab="Particle emission (T)",col=agg_part$x)
plot(agg_part$Group.1,agg_part$x,main="Particle emissions in the US",xlab="Year",ylab="Particle emission (T)",col="blue")
plot(agg_part$Group.1,agg_part$x,main="Particle emissions in the US",xlab="Year",ylab="Particle emission (T)")
lines(agg_part$Group.1,agg_part$x,col="blue")
source('~/Born To Code/Exploratory Data Analysis/Exploratory_Project-2/plot1.R', echo=TRUE)
names(part_data)
plot(agg_part$Group.1,agg_part$x,main="Particle emissions in the US",xlab="Year",ylab="Particle emission (T)",type='o')
plot(agg_part$Group.1,agg_part$x,main="Particle emissions in the US",xlab="Year",ylab="Particle emission (T)",pch='+')
lines(agg_part$Group.1,agg_part$x,col="blue")
source('~/.active-rstudio-document', echo=TRUE)
source('~/Born To Code/Exploratory Data Analysis/Exploratory_Project-2/plot3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Born To Code/Exploratory Data Analysis/Exploratory_Project-2/plot3.R', echo=TRUE)
balti_data
source('~/Born To Code/Exploratory Data Analysis/Exploratory_Project-2/plot3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
